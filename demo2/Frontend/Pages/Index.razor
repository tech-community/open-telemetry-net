@page "/"
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h1>Demo - Open Telemetry con .NET</h1>
<hr>
<div class="row">
    <div class="col-md-6">
        <h3>Confirmar Ordenes</h3>
        <SurveyPrompt Title="Ingrese un nÃºmero de orden aleatorio: " />

        <label>No. de Orden</label>
        <input type="text" @bind="@OrderID" @oninput="@((e) => { OrderID=(string)e.Value;})" />

        <button class="btn btn-primary" @onclick="SendConfirmation">Confirmar Orden</button>

        @if (!string.IsNullOrEmpty(MessageOrder))
        {
            <div class="alert alert-primary mt-4" role="alert">
                <span class="oi oi-circle-check mr-2" aria-hidden="true"></span>
                <strong>Respuesta: @MessageOrder</strong>
            </div>
        }
    </div>
    <div class="col-md-6">
        <h3>Notificaciones (SignalR)</h3>

        <p>
            @foreach (var message in messages)
            {
                <div class="alert alert-info mt-4" role="alert">
                    <span class="oi oi-circle-check mr-2" aria-hidden="true"></span>
                    <strong>@message</strong>
                </div>
            }
        </p>
    </div>
</div>

@code {
     private string OrderID {get;set;} = "";
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
     private string MessageOrder {get;set;} = "";

    private async Task SendConfirmation()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            "http://localhost:5000/Orders/confirm/"+OrderID);

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var responseStream = await response.Content.ReadAsStringAsync();
            MessageOrder = responseStream.ToString();
        }
        else
        {
            
        }
    }


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("http://localhost:5002/notifications"))
            .Build();

        hubConnection.On<string>("notifications", (message) =>
        {
            var encodedMsg = $"{message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}